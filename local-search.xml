<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Pipenv基本用法</title>
    <link href="/2020/12/01/SQLite%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <url>/2020/12/01/SQLite%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="SQLite基本用法"><a href="#SQLite基本用法" class="headerlink" title="SQLite基本用法"></a>SQLite基本用法</h1><p>首先在命令行里输入</p><pre><code class="hljs plain">sqlite3</code></pre><p>进入SQLite命令提示符。</p><h2 id="点命令"><a href="#点命令" class="headerlink" title="点命令"></a>点命令</h2><h3 id="数据库相关点命令"><a href="#数据库相关点命令" class="headerlink" title="数据库相关点命令"></a>数据库相关点命令</h3><ul><li>.open FILENAME 打开一个数据库</li><li>.tables 列出所有表</li><li>.schema 显示CREATE语句</li><li>.schema TABLE 显示表的CREATE语句</li><li>.output FILENAME 发送输出到文件，如果不存在则创建（之后接.dump）</li><li>.dump TABLE 将表写入指定的文件（之前接.output）</li><li>.read FILENAME 读取脚本文件（如使用.output和.dump创建的文件）</li></ul><h3 id="其他常用点命令"><a href="#其他常用点命令" class="headerlink" title="其他常用点命令"></a>其他常用点命令</h3><ul><li>.help 帮助</li><li>.exit/.quit 退出</li><li>.databases 列出数据库名称及路径文件</li><li>.backup DB FILE 将DB数据库（默认是”main”）备份到FILE</li><li>.show 显示当前设置</li><li>.header on/off 开关表头</li><li>.mode list/column/csv/tabs/html 设置显示模式</li></ul><p>比较好看的输出格式：</p><pre><code class="hljs pgsql">.<span class="hljs-keyword">header</span> <span class="hljs-keyword">on</span>.mode <span class="hljs-keyword">column</span></code></pre><h2 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h2><ul><li>NULL</li><li>INT</li><li>TEXT</li><li>BLOB：二进制大对象（binary large object），如图片、声音和自定义对象等。</li><li>REAL</li></ul><p>Boolean：SQLite没有单独的Boolean类型，存为0和1。</p><p>Date和Time：</p><ul><li>格式为YYYY-MM-DD HH:MM:SS.SSS：TEXT</li><li>天数：REAL</li><li>秒数：INTEGER</li></ul><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>在命令行中：</p><pre><code class="hljs reasonml">sqlite3 <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DATABASENAME</span>.</span></span>db</code></pre><p>在命令行中也可以使用.dump来导出完整的数据库到一个文本文件中：</p><pre><code class="hljs css"><span class="hljs-selector-tag">sqlite3</span> <span class="hljs-selector-tag">test</span><span class="hljs-selector-class">.db</span> <span class="hljs-selector-class">.dump</span> &gt; <span class="hljs-selector-tag">test</span><span class="hljs-selector-class">.sql</span></code></pre><p>上述命令将test.db的内容转换成SQLite语句，并将其存储到test.sql中。</p><p>也可也从test.sql中恢复：</p><pre><code class="hljs stata">sqlite3 <span class="hljs-keyword">test</span>.<span class="hljs-keyword">db</span> &lt; <span class="hljs-keyword">test</span>.sql</code></pre><h3 id="附加和分离数据库"><a href="#附加和分离数据库" class="headerlink" title="附加和分离数据库"></a>附加和分离数据库</h3><p>当想在同一时间使用多个数据库时，可以使用<strong>ATTACH DATABASE</strong>语句附加一个特定的数据库。然后所有的SQLite语句将在附加的数据库下执行。</p><pre><code class="hljs sqlite">ATTACH DATABASE filename AS database_name;</code></pre><p>如果数据库未创建，上述命令将先创建一个数据库。</p><p>对应的分离数据库：</p><pre><code class="hljs sqlite">DETACH DATABASE database_name;</code></pre><h3 id="创建与删除表CREATE-DROP"><a href="#创建与删除表CREATE-DROP" class="headerlink" title="创建与删除表CREATE/DROP"></a>创建与删除表CREATE/DROP</h3><p>在当前数据库下创建表：</p><pre><code class="hljs sqlite">CREATE TABLE table_name(    column1 datatype PRIMARY KEY，    column2 datatype,    ...    columnN datatype,);</code></pre><p>在 datatype 后面可以加上 NOT NULL的约束，表示该列不能为NULL。</p><p>删除表：</p><pre><code class="hljs sqlite">DROP TABLE table_name;</code></pre><h3 id="插入行INSERT"><a href="#插入行INSERT" class="headerlink" title="插入行INSERT"></a>插入行INSERT</h3><p>可以使用<strong>INSERT INTO</strong>添加新的数据行：</p><pre><code class="hljs sqlite">INSERT INTO table_name (column1, column2, ... , columnN)VALUES(value1, value2, ..., valueN);</code></pre><p>如果要为表中所有列添加值，可以省略列名：</p><pre><code class="hljs sqlite">INSERT INTO table_name VALUES(value1, value2, ..., valueN);</code></pre><p>使用一个表来填充另一个：</p><pre><code class="hljs sqlite">INSERT INTO first_table_name (column1, column2, ..., columnN)SELECT column1, column2, ..., columnNFROM second_table_nameWHERE condition;</code></pre><h3 id="获取数据SELECT"><a href="#获取数据SELECT" class="headerlink" title="获取数据SELECT"></a>获取数据SELECT</h3><pre><code class="hljs sqlite">SELECT column1, column2, ..., columnN FROM table_name;</code></pre><p>如果要获取所有列：</p><pre><code class="hljs sqlite">SELECT * FROM table_name;</code></pre><p>如果需要消除重复的记录：</p><pre><code class="hljs sqlite">SELECT DISTINCT column1,... FROM table_name;</code></pre><p>可以使用<strong>WHERE</strong>子句指定获取数据的条件。</p><pre><code class="hljs sqlite">SELECT column1, column2, ..., columnN FROM table_nameWHERE condition;</code></pre><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>&lt;&gt; （!=也可以用）不等于</li><li>AND，OR，IS（=），NOT，IS NOT（!=）</li><li>EXISTS：在满足一定条件的指定表中搜索行的存在</li><li>UNIQUE：确保无重复</li><li>IN，NOT IN：把某个值与指定列表中的值比较</li><li>BETWEEN min AND max：在区间[min, max]中</li><li>LIKE：把某个值与使用通配符运算符的相似值进行比较</li><li>GLOB：与LIKE相似，但大小写敏感</li></ul><p>LIKE的通配符：</p><ul><li>% 零个、一个或多个数字或字符</li><li>_ 单一的数字或字符</li></ul><p>GLOB的通配符：</p><ul><li><p>* 零个、一个或多个数字或字符</p></li><li><p>? 单一的数字或字符</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4></li></ul><p>所有以Ki开始的记录，之后的字符不做限制。</p><p>使用LIKE：</p><pre><code class="hljs sqlite">SELECT * FROM COMPANY WHERE NAME LIKE &#39;Ki%&#39;;</code></pre><pre><code class="hljs sqlite">SELECT * FROM COMPANY WHERE NAME GLOB &#39;Ki*&#39;;</code></pre><p>子查询查找所有SALARY &gt; 65000的AGE记录，然后列出外查询中AGE存在于子查询返回的结果中的记录的AGE。</p><pre><code class="hljs sqlite">SELECT AGE FROM COMPANY WHERE EXISTS (SELECT AGE FROM COMPANY WHERE SALARY &gt; 65000);</code></pre><p>子查询查找所有SALARY &gt; 65000的AGE记录，然后选出外查询中AGE大于所有子查询返回的结果的记录。(也就是说AGE大但SALARY&lt;65000的记录)</p><pre><code class="hljs sqlite">SELECT * FROM COMPANY WHERE AGE &gt; (SELECT AGE FROM COMPANY WHERE SALARY &gt; 65000);</code></pre><p>查询所有AGE为25或27的记录</p><pre><code class="hljs sqlite">SELECT * FROM COMPANY WHERE AGE IN (25, 27);</code></pre><h3 id="更新-修改数据UPDATE"><a href="#更新-修改数据UPDATE" class="headerlink" title="更新/修改数据UPDATE"></a>更新/修改数据UPDATE</h3><p>使用<strong>UPDATE</strong>查询和修改记录：</p><pre><code class="hljs sqlite">UPDATE table_nameSET column1 &#x3D; value1, column2 &#x3D; value2, ..., columnN &#x3D; valueNWHERE condition;</code></pre><h3 id="删除记录DELETE"><a href="#删除记录DELETE" class="headerlink" title="删除记录DELETE"></a>删除记录DELETE</h3><pre><code class="hljs sqlite">DELETE FROM table_nameWHERE condition;</code></pre><p>删除表中所有记录：</p><pre><code class="hljs sqlite">DELETE FROM table_name;</code></pre><h3 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h3><p>限制由<strong>SELECT</strong>语句返回的数据数量。</p><pre><code class="hljs sqlite">SELECT column1, ..., columnNFROM table_nameLIMIT number_of_rows;</code></pre><p>与<strong>OFFSET</strong>一起用，则是从第start_row+1行开始，提取number_of_rows个记录：</p><pre><code class="hljs sqlite">SELECT column1, ... columnNFROM table_nameLIMIT number_of_rows OFFSET start_row;</code></pre><h3 id="数据分组、过滤、排序"><a href="#数据分组、过滤、排序" class="headerlink" title="数据分组、过滤、排序"></a>数据分组、过滤、排序</h3><p>顺序：</p><pre><code class="hljs sqlite">SELECT FROMWHEREGROUP BYHAVINGORDER BY</code></pre><h4 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h4><p>对数据分组。</p><pre><code class="hljs sqlite">SELECT column1, ... columnNFROM table_nameGROUP BY column1, ... columnN;</code></pre><h4 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h4><p>和<strong>WHERE</strong>语句相同，只不过是在<strong>GROUP BY</strong>语句上设置条件。</p><h4 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h4><p>按一个或多个列升序/降序排列数据：</p><pre><code class="hljs sqlite">SELECT column1, ... columnNFROM table_nameORDER BY column1, ... columnN ASC&#x2F;DESC;</code></pre><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQLite</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pipenv常用命令</title>
    <link href="/2020/12/01/PIpenv%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/12/01/PIpenv%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Pipenv-常用命令"><a href="#Pipenv-常用命令" class="headerlink" title="Pipenv 常用命令"></a>Pipenv 常用命令</h1><p>一段时间没用就忘了不少，记下来下次好找。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><p>cd到需要创建虚拟环境的文件夹，然后：</p><pre><code class="hljs cmake">pipenv <span class="hljs-keyword">install</span></code></pre><ul><li><p>如果目录中虚拟环境<strong>未</strong>创建，则创建虚拟环境与 Pipfile 文件。</p></li><li><p>如果目录中虚拟环境<strong>未</strong>创建且<strong>有</strong> Pipfile 文件，则根据 Pipfile 文件来安装相应的python版本和依赖包。</p></li><li><p>如果目录中虚拟环境<strong>已</strong>创建且<strong>有</strong> Pipfile 文件，则根据 Pipfile 文件来安装依赖包。</p></li></ul><p>PS：如果需要切换成国内镜像源的话直接修改 Pipfile 和 Pipfile.lock 里的 url 就可以了。</p><h3 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h3><p>进入虚拟环境文件夹，然后：</p><pre><code class="hljs dockerfile">pipenv <span class="hljs-keyword">shell</span></code></pre><h3 id="安装包到虚拟环境"><a href="#安装包到虚拟环境" class="headerlink" title="安装包到虚拟环境"></a>安装包到虚拟环境</h3><pre><code class="hljs sql">pipenv <span class="hljs-keyword">install</span> <span class="hljs-keyword">package</span>-<span class="hljs-keyword">name</span></code></pre><h3 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h3><pre><code class="hljs awk"><span class="hljs-keyword">exit</span></code></pre><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h3 id="指定Python版本"><a href="#指定Python版本" class="headerlink" title="指定Python版本"></a>指定Python版本</h3><pre><code class="hljs apache"><span class="hljs-attribute">pipenv</span> --python <span class="hljs-number">3</span><span class="hljs-attribute">pipenv</span> --python <span class="hljs-number">3</span>.<span class="hljs-number">7</span><span class="hljs-attribute">pipenv</span> --python <span class="hljs-number">2</span>.<span class="hljs-number">7</span>.<span class="hljs-number">14</span></code></pre><p>这几种命令都支持，但指定的版本必须是系统已经安装且在环境变量中可以找到的版本。</p><p>如果不指定的话，pipenv会使用系统默认的python版本。</p><h3 id="查看已经安装的模块"><a href="#查看已经安装的模块" class="headerlink" title="查看已经安装的模块"></a>查看已经安装的模块</h3><pre><code class="hljs ebnf"><span class="hljs-attribute">pipenv graph</span></code></pre><h3 id="卸载模块"><a href="#卸载模块" class="headerlink" title="卸载模块"></a>卸载模块</h3><pre><code class="hljs sql">pipenv <span class="hljs-keyword">uninstall</span> <span class="hljs-keyword">package</span>-<span class="hljs-keyword">name</span></code></pre><h3 id="获取当前环境根目录"><a href="#获取当前环境根目录" class="headerlink" title="获取当前环境根目录"></a>获取当前环境根目录</h3><pre><code class="hljs ada">pipenv <span class="hljs-comment">--where</span></code></pre><h3 id="获取当前虚拟环境位置"><a href="#获取当前虚拟环境位置" class="headerlink" title="获取当前虚拟环境位置"></a>获取当前虚拟环境位置</h3><pre><code class="hljs ada">pipenv <span class="hljs-comment">--venv</span></code></pre><h3 id="通过-requirements-txt文件安装模块"><a href="#通过-requirements-txt文件安装模块" class="headerlink" title="通过 requirements.txt文件安装模块"></a>通过 requirements.txt文件安装模块</h3><pre><code class="hljs cmake">pipenv <span class="hljs-keyword">install</span> -r requirements.txt</code></pre><h3 id="导出所安装的包到-requirements-txt"><a href="#导出所安装的包到-requirements-txt" class="headerlink" title="导出所安装的包到 requirements.txt"></a>导出所安装的包到 requirements.txt</h3><pre><code class="hljs cos">pipenv <span class="hljs-keyword">lock</span> -<span class="hljs-keyword">r</span></code></pre><h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><pre><code class="hljs ada">pipenv <span class="hljs-comment">--help</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pipenv</tag>
      
      <tag>虚拟环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人网站（4）：Typora搭配Hexo写文章</title>
    <link href="/2020/09/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%884%EF%BC%89%EF%BC%9ATypora%E6%90%AD%E9%85%8DHexo%E5%86%99%E6%96%87%E7%AB%A0/"/>
    <url>/2020/09/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%884%EF%BC%89%EF%BC%9ATypora%E6%90%AD%E9%85%8DHexo%E5%86%99%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>上一篇 <a href="https://blog.ahrisy.com/2020/08/26/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%883%EF%BC%89%EF%BC%9AHexo%E6%90%AD%E5%BB%BABlog/">搭建个人网站（3）：Hexo搭建网站</a> 里提到，Hexo 会使用 scaffolds 文件夹里的markdown作为模板来生成新的文件，我们也可以通过修改它们来自定义自己的模板。</p><p>scaffolds 文件夹里一般会有下面三个默认的模板，分别对应draft, page 和 post 三种文章类型：</p><p><img src="scaffolds.jpg"></p><p>打开之后就可以看到这些文件的内容只有一个YAML格式的文件头：</p><p><img src="page.jpg"></p><p>在使用 Hexo 新建文章的时候就会根据文章类型自动套用这些模板，只要修改相应的.md就可以让之后生成的文章使用我们自定义的模板啦。</p><p>举个最简单的例子，如果希望之后生成的 post 都有 categories 属性，那只用将 categories 加入到 post.md 中即可：</p><p><img src="eg.jpg"></p><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>Typora是一款很简洁好看的Markdown编辑器，官网：<a href="https://www.typora.io/">https://www.typora.io/</a> 。</p><p>但在使用Typora搭配Hexo写博客的时候，如果不进行一些设置的话，会导致编译后本地图片无法显示等问题，查看图片链接地址的话会发现是图片的路径不对导致的。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>网上的大部分解决办法（比如下载插件之类的）都过时了，对于新版的Hexo，解决办法非常简单：</p><ul><li><p>Step 1. 将__config.yml 中的 post_asset_folder 设置为 true，这样每次创建文章的时候会生成同名的文件夹，可以将图片等资源文件放进去。</p></li><li><p>Step 2. 使用 Typora 的时候设置 Format — Image — Use Image Root Path，讲 root path 设置为第一步中创建的文件夹。</p></li><li><p>Step 3. 直接用markdown的语法插入图片即可，注意这时不需要写相对目录，也不要写 ‘/‘，<strong>只写文件名即可</strong>，如下图：</p><p><img src="test.jpg"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人网站（3）：Hexo搭建网站</title>
    <link href="/2020/08/26/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%883%EF%BC%89%EF%BC%9AHexo%E6%90%AD%E5%BB%BABlog/"/>
    <url>/2020/08/26/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%883%EF%BC%89%EF%BC%9AHexo%E6%90%AD%E5%BB%BABlog/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Hexo 是一款使用Node.js的博客框架，可以使用它来快速生成静态网页，还有很多可选用的主题，也可以自己修改主题。</p><p>中文官网：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>在安装Hexo之前需要安装Node.js环境，Node.js 官网 <a href="https://nodejs.org/en/">https://nodejs.org/en/</a> 。</p><p>除了Node.js之外，还需要Git：<a href="https://git-scm.com/">https://git-scm.com/</a> 。</p><p>在国内的话下载速度可能很慢，可以使用淘宝镜像下载：<a href="https://npm.taobao.org/mirrors/node">淘宝 Node.js 镜像</a> , <a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝Git for Windows 镜像</a> 。</p><p>在配置好环境之后，就可以使用npm安装Hexo了：</p><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span></code></pre><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>安装完成后，在指定文件夹下新建一个个人博客只需要执行下面几条命令：</p><pre><code class="hljs powershell"><span class="hljs-variable">$</span> hexo init &lt;folder&gt;<span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> &lt;folder&gt;<span class="hljs-variable">$</span> npm install</code></pre><p>新建完成后，需要我们注意的文件和文件夹有以下几个：</p><ul><li>__config.yml：配置信息</li><li>scaffolds：模板文件夹，Hexo会使用其中的markdown文件作为模板来新建文件</li><li>source：存放资源的地方，里面有个_posts文件夹就是放blog的地方</li><li>themes：放主题的文件夹，下载的主题一般需要放在这个文件夹里面</li></ul><h2 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h2><p>如果希望使用开启了GitHub Pages的仓库来搭载Hexo生成的个人博客，需要更改__config.yml 中的 url 和 root。注意：这里只需要仓库开启GitHub Pages功能即可，也可以不在那个xxx.github.io里存放。</p><p>首先，需要配置__config.yml中的 deploy 部分，比如这里我是使用名为 blog 的仓库的 master 分支来存储网站的：</p><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://github.com/Ahrisya/blog.git</span>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span></code></pre><p>如果使用自定义域名的话，比如我在xxx.github.io中使用了自定义域名 <a href="https://ahrisy.com/">https://ahrisy.com</a>，但想在 blog 这个仓库里存放Hexo生成的网站，这时需要更改__config.yml的url和root如下即可：</p><pre><code class="hljs yaml"><span class="hljs-attr">url:</span> <span class="hljs-string">https://ahrisy.com/blog</span><span class="hljs-attr">root:</span> <span class="hljs-string">/blog/</span></code></pre><p>保存修改后，打开 git bash 执行下列命令即可：</p><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo g<span class="hljs-variable">$ </span>hexo d</code></pre><p>hexo g 的意思是生成网站，hexo d 的意思是部署到你指定的 url 上去。等待部署完成后即可在指定的url上看到自己的网站了。</p><p>PS：这时有可能会报错，大意是说 Deployer not found 之类的，这是因为没有安装和 hexo 配套的 git 插件导致的，只需要用如下命令安装之后再 hexo g&amp;d 即可：</p><pre><code class="hljs ada">$ npm intall hexo-deployer-git <span class="hljs-comment">--save</span></code></pre><h2 id="部署到-Vercel"><a href="#部署到-Vercel" class="headerlink" title="部署到 Vercel"></a>部署到 Vercel</h2><p>GitHub Pages 对国内的访客来说连接速度可能很慢，这时候我们可以使用Vercel来部署 Hexo blog。 在我的上一个blog：<a href="https://blog.ahrisy.com/2020/08/20/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%882%EF%BC%89%EF%BC%9AGithub%E5%92%8CVercel%E5%BB%BA%E7%AB%99%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AEDNS/">搭建个人网站（2）：Github和Vercel建站以及配置DNS </a> 中讲了如何使用Vercel以及使用自定义域名。</p><p>我们同样需要一个GitHub仓库，这里不需要开启GitHub Pages功能，然后将该仓库导入到 Vercel 中，设置好域名（也可以使用二级域名）。</p><p>在设置好域名之后，同样修改 __config.yml 的 deploy 部分到指定的 GitHub repo， 然后修改 url 到对应的域名即可。</p><p>这样在执行 hexo g&amp;d 之后，改动就会推送到 GitHub 仓库中，而 Vercel 会根据GitHub仓库的改动自动同步更新。</p><p>PS：<strong>如果不是子目录的话，不要修改root！</strong> 否则资源和网页的链接会出错。</p><h2 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h2><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo new <span class="hljs-string">&quot;文件名&quot;</span>  <span class="hljs-comment"># 新建文章</span><span class="hljs-variable">$ </span>hexo g  <span class="hljs-comment"># 生成静态网页</span><span class="hljs-variable">$ </span>hexo s  <span class="hljs-comment"># 本地预览</span><span class="hljs-variable">$ </span>hexo d  <span class="hljs-comment"># 部署</span></code></pre><p>接下来就是配置模板以及使用 Hexo + Typora 写 blog 需要注意的一些事了。</p>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
      <tag>Vercel</tag>
      
      <tag>Hexo</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人网站（2）：Github和Vercel建站以及配置DNS</title>
    <link href="/2020/08/20/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%882%EF%BC%89%EF%BC%9AGithub%E5%92%8CVercel%E5%BB%BA%E7%AB%99%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AEDNS/"/>
    <url>/2020/08/20/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%882%EF%BC%89%EF%BC%9AGithub%E5%92%8CVercel%E5%BB%BA%E7%AB%99%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AEDNS/</url>
    
    <content type="html"><![CDATA[<p>在购买好自定义域名之后，下一步就是去找个服务器来放置我们的网站了，但国内服务器要备案，国外的服务器又贵，既不想备案又不想花钱的话，那 <a href="https://pages.github.com/">GitHub Pages</a> 是个不错的选择。</p><p>但GitHub的问题在于国内访问速度很慢，如果主要是面向国内的话建议使用 <a href="https://vercel.com/">Vercel</a> （原本叫Zeit）。Github Pages的教程已经够多了，但Vercel的教程很少，所以这里主要讲如何用 GitHub + Vercel配置个人网站。</p><h2 id="Why-Vercel"><a href="#Why-Vercel" class="headerlink" title="Why Vercel"></a>Why Vercel</h2><p>相比于GitHub Pages，国内访问Vercel的速度更快，而且无需科学上网，下面是我自己的一个网站使用Vercel前后速度的对比（使用了二级域名，vercel似乎并不能将一个仓库的站点作为另一个仓库的子目录），访问速度平均提升近7倍。</p><p><img src="newspeed.jpg"></p><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>如果没有GitHub账号的话需要申请一个，注意<strong>不要使用QQ邮箱作为主邮箱</strong>，因为Vercel会自动拒绝使用QQ邮箱的账号。如果已经用QQ邮箱注册了GitHub，可以到Setting -&gt; Emails里修改自己的主邮箱。</p><p>然后在GitHub里建一个仓库来存放自己的网页，仓库的名字可以随便取，然后可以上传个index.html方便之后预览，e.g.</p><p><img src="gitrepo.jpg" alt="gitrepo"></p><h2 id="Vercel"><a href="#Vercel" class="headerlink" title="Vercel"></a>Vercel</h2><p>建立好GitHub repo之后，就可以去配置Vercel了。</p><p>进入<a href="https://vercel.com/home">Vercel官网</a>，点击主页上那个大大的Start Deploying，它会让你选择一种登录Vercel的方法，支持使用GitHub，GitLab和Bitbucket登录，这里我们选GitHub，然后就会看到下面的页面：</p><p><img src="import_github.jpg" alt="import github"></p><p>输入用来存放网站的GitHub Repo的地址，然后点Continue，他会让你选择包含source code的文件：</p><p><img src="importpj.jpg"></p><p>（PS：如果是第一次使用Vercel的话，上面两步里会弹出在GitHub中安装vercel的许可，同意即可）</p><p>这里我们没啥source code，所以直接continue即可，就会出现下面的页面：</p><p><img src="importsetting.jpg"></p><p>如果你需要编译souce code的话，可以看看framework preset里有没有设定好的配置，如果是像我这样只是个静态网页，直接打开index.html就可以使用的话就选择other，然后build command打开override，里面什么也不用填，这样vercel就会直接将你的网站呈现出来，不进行改动。</p><p>设置好之后点Deploy即可。</p><p>顺利的话稍等片刻就会弹出部署成功的页面，还有浮夸的撒花233。</p><p><img src="success.jpg"></p><p>如果一直显示queued的话，可以联系vercel的support，回复速度很快，基本一天就能解决（记得查邮箱）。</p><p>部署完成之后可以点击visit进入网页看看效果：</p><p><img src="preview.jpg"></p><h2 id="配置自定义域名"><a href="#配置自定义域名" class="headerlink" title="配置自定义域名"></a>配置自定义域名</h2><p>进入这个deployment的界面：</p><p><img src="project.jpg"></p><p>点View Domains就会直接跳到配置域名的选项：</p><p><img src="domain.jpg"></p><p>输入自己的域名，然后点Add，它会弹出来一些需要做的配置，接下来需要去我们的域名提供商那里根据Vercel给出的要求进行配置。</p><p>我是在NameSilo购买的域名，所以就进入NameSilo的管理页面：</p><p><img src="namesilo.jpg"></p><p>选中需要配置的域名，点击上方的Change Nameservers可以更换Name server（我这里已经改过了），点击右侧小小的蓝球可以配置DNS。</p><p>把Name Servers改成Vercel提供的两个server</p><p><img src="nameserver.jpg"></p><p>这个配置会在48个小时内生效，我的话十几分钟就生效了。</p><p>然后按Vercel的要求把DNS改为：</p><p><img src="DNS.jpg"></p><p>这个会在15分钟内生效。</p><p>等这两个改动都生效之后就可以用我们自己的域名访问刚刚建立的网站啦~</p><p>以后想要修改网站的话，只需要将改动push到GitHub上，vercel会自动把改动同步过来，完全不用管，超省心。</p><p>在一级域名配置好之后，也可以直接在vercel中使用二级域名，无需进行额外设置。</p>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
      <tag>DNS</tag>
      
      <tag>GitHub</tag>
      
      <tag>Vercel</tag>
      
      <tag>NameSilo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人网站（1）：申请域名</title>
    <link href="/2020/08/17/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%881%EF%BC%89%EF%BC%9A%E7%94%B3%E8%AF%B7%E5%9F%9F%E5%90%8D/"/>
    <url>/2020/08/17/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%881%EF%BC%89%EF%BC%9A%E7%94%B3%E8%AF%B7%E5%9F%9F%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>域名（Domain Name）就是大家经常输入的 xxx.com，xxx.cn 之类的网址啦，而各个教程和平台中常见的简写DNS（Domain Name Server） 就是域名服务器，它搭载了网域名称系统（Domain Name System，是将域名和IP地址相互映射的系统）。当用户输入域名时，DNS就会通过将域名转换为IP地址提供给机器处理，类似于一个手机里号码簿之类的存在。</p><p>所以建立网站，首先就要购买一个域名（没有人会想记一串IP地址的），国内的话可以选用阿里云、腾讯云之类的平台，但在国内购买域名的话需要实名认证，如果使用国内的服务器搭建网站的话还需要备案。在备案之后，别人就可以在域名备案查询网站（比如 <a href="http://icp.chinaz.com/">http://icp.chinaz.com/</a> ）上看到你的个人信息，e.g. </p><p><img src="icp.png"></p><p>个人是很反感这种情况的，毕竟自己的隐私还是想尽可能地保护好，所以国内的域名和服务器就不做考虑了，国外购买域名的话个人对比了下面这几家：</p><ul><li><p><a href="https://www.namesilo.com/">NameSilo</a> 似乎最近发展不错，价格很是便宜，提供免费的Whols Privacy（域名隐私保护）等功能，支持支付宝和微信，就是网站界面有点丑。我选的就是这家，新用户的话可以用这个优惠码：<strong>asns2020</strong>，直接复制在付款时粘贴到对应的coupon框里面就可以了。</p></li><li><p><a href="https://www.godaddy.com/">GoDaddy</a>  规模很大，价格尚可，大部分域名第一年有优惠，但Whois Privacy需要另加价购买，总价付款渠道很多，支付宝也可以用。</p></li><li><p><a href="%22https://www.namecheap.com/%22">Namecheap</a> 价格和NameSilo比要稍微贵一些。</p></li><li><p><a href="https://www.domain.com/">Domain</a> 价格贵了，而且不支持支付宝和微信，所以不考虑。</p></li></ul><h2 id="NameSilo-域名购买流程"><a href="#NameSilo-域名购买流程" class="headerlink" title="NameSilo 域名购买流程"></a>NameSilo 域名购买流程</h2><ul><li><p>Step 1：进入<a href="https://www.namesilo.com/">NameSilo主页</a> ，搜索你想要的域名，选到想要的之后点右边的Add，然后它就会变成Checkout。</p><p><img src="add_domains.jpg"></p></li><li><p>选好喜欢的域名之后，点Checkout就会显示下面的页面。</p><p><img src="checkout.jpg"></p></li><li><p>前两个不用管，Auto-Renew的意思就是到期了自动续费，Privacy Setting那里选WHOIS Privacy，把coupon输入后点submit，它就会给个1刀的discount啦。</p></li><li><p>完成之后点Continue进行付款，如果是第一次使用的话需要注册一个账号，按提示来就可以了。</p></li><li><p>注册完账号，付完款后点击右上角的Manage My Domains，就可以看到我们的域名啦~</p><p><img src="domain.jpg"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
      <tag>NameSilo</tag>
      
      <tag>域名</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭好个人博客了</title>
    <link href="/2020/08/16/%E6%90%AD%E5%A5%BD%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BA%86/"/>
    <url>/2020/08/16/%E6%90%AD%E5%A5%BD%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<p>终于弄好博客和个人网站了，网上很多教程都过时了，还得自己去看官方文档。之后会把这段时间踩的坑整理一下发出来，给想搭网站的小伙伴分享一下。</p><p>尽量每周都能更一点东西吧……（咕咕咕警告）</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
